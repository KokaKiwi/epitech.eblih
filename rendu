#!/bin/bash
#set -x
exec 3<&1
exec 4<&2
exec 1>&-
exec 2>&-

BASE_DIR=${HOME}/rendu
BACKUP_DIR="${BASE_DIR}/.tmp/backup"
ABS_DIR="`pwd -P`"

[ -z "${LOGIN}" ] && LOGIN=`whoami`
MOULINETTE="ramassage-tek"

GIT="git"
HOST="git.epitech.eu"
GIT_LOGIN="${LOGIN}"

#mode normal
API="blih -u ${LOGIN} repository"
API_key="blih -u ${LOGIN} sshkey"
#mode degrade
#API="true apicall.py -u ${LOGIN} repository"

PROJECT=""
REPO=""
PASS=""

getpass()
{
    info "Password:"
    stty -echo
    read PASS;
    stty echo
    YAPI="echo ${PASS} >&3 | ${API}"
}

error()
{
    echo "$1" >&4
    exit 1
}

warning()
{
    echo "$1" >&4
}

info()
{
    echo "$1" >&3
}

check_remote_repo_exists()
{
    ${API} list 2>&4 | grep -q -E '^'${REPO}'$'
    return $?
}

create_remote_repo()
{
    ${API} create "${REPO}" >&3 2>&4
#    ${API} setacl "${REPO}" ${LOGIN} rwa >&3 2>&4
    ${API} setacl "${REPO}" ${MOULINETTE} r >&3 2>&4
}

config_git_account()
{
    $GIT config --global user.name ${LOGIN}
    $GIT config --global user.email ${LOGIN}"@epitech.eu"
}

check_valid_repo()
{
    [ -d ".git" ] && return
    warning "New project detected. Setting up..."
    check_remote_repo_exists ${REPO}
    if [ $? -ne 0 ]
    then
	warning "Linking to remote server..."
	config_git_account
        create_remote_repo
    fi
    info "Syncing with remote server..."
    if [ `ls -a | wc -w` -gt "2" ]; then empty=0; else empty=1; fi
    if [ $empty -eq 0 ]
    then #make backup
	rm -rf $BACKUP_DIR/${PROJECT} && mkdir -p $BACKUP_DIR/${PROJECT}
	rm -rf ./.git/
	#mv -f ./* $BACKUP_DIR/${PROJECT}/
	#mv -f ./.* $BACKUP_DIR/${PROJECT}/
	find ./ -maxdepth 1 -mindepth 1 -name "*" -exec mv -f {} "${BACKUP_DIR}/${PROJECT}/" \;
    fi
    $GIT clone "${GIT_LOGIN}@${HOST}:/${LOGIN}/${REPO}" .
    if [ $? -ne 0 ]; then
        cp -rf ${BACKUP_DIR}/${PROJECT}/* ./
	error "Can't sync with remote server"
    fi
    if [ $empty -eq 0 ]
    then #get back backup
	find "${BACKUP_DIR}/${PROJECT}/" -maxdepth 1 -mindepth 1 -name "*" -exec cp -rf {} ./ \; && rm -rf "${BACKUP_DIR}/${PROJECT}"
    fi
}

save_project()
{
    info "Saving your project..."
    commit_project && push_project && info "Project successfully turned in !"
}

commit_project()
{
    [ `$GIT status --porcelain | wc -l` -eq 0 ] && info "Nothing has changed since last time. Have you really worked hard enough ?" && return 1
    $GIT add --all
    $GIT commit -a -q -m "rendu by ${LOGIN} on $(uname -n) @ $(date)" || error "Failed to save your project. You might contact an assistant."
    return 0
}

push_project()
{
    $GIT push --force origin master || error "Failed to push new data to server. You might contact an assistant."
}

#check if we are in a good directory (/home/login/rendu/*)
is_local_repo()
{
    echo "$1" | grep -q -E '^'$BASE_DIR'/+[a-zA-Z0-9_.-]+/*$'
    return $?
}

rendu()
{
    info "Turning in ${PROJECT}"
    check_valid_repo
    save_project
}

soft_reset()
{
    for acl in `${API} getacl "${REPO}" >&3 2>&4`
    do
	login=`echo $acl | cut -f1 -d:`
	${API} setacl "${REPO}" "${LOGIN}" >&3 2>&4
    done
    #${API} setacl "${REPO}" "${LOGIN}" rwa >&3 2>&4
    ${API} setacl "${REPO}" "${MOULINETTE}" r >&3 2>&4
}

hard_reset()
{
    soft_reset
    ${GIT} push --delete origin master
    #backup, rm all, add/commit, backup, add/commit, push
}


get_project_name()
{
    PROJECT=`basename "$ABS_DIR"`
}

build_repo_name()
{
    #promo=`id -g ${LOGIN} | tail -c 5`
    #[ -z "${promo}" ] && return
    #REPO="${promo}-${PROJECT}-${LOGIN}"
    REPO="${PROJECT}"
}

sshkey()
{
    if [ -z "${SSH_AGENT_PID}" ]
    then
	warning 'You MUST execute this in your shell before doing anything else:'
	info 'eval `ssh-agent`'
	exit 2
    fi
    if [ ! -f "${HOME}/.ssh/id_rsa" ]
    then
	ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N "" -C "${LOGIN}@`uname -n`@`date +%d%m%y-%H%M`" || error "Generate sshkey failed"
	${API_key} upload ~/.ssh/id_rsa.pub >&3 2>&4
	if [ $? -ne 0 ]
	then
	    rm -rf ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
	    error "Push sshkey on server failed"
	fi
    fi
    if [ ! -f "${HOME}/.ssh/config" ]; then echo "Host git git.epitech.eu git.epitech.net
     ForwardAgent yes" > "${HOME}/.ssh/config"
    else
	grep -q 'git.epitech.' "${HOME}/.ssh/config" || echo "Host git git.epitech.eu git.epitech.net
     ForwardAgent yes" > "${HOME}/.ssh/config"
    fi
    ssh-add ~/.ssh/id_rsa || error "Can't add sshkey to agent"
}

init()
{
    is_local_repo "${ABS_DIR}" || error "Not in ~/rendu/your_project"
    get_project_name
    [ -z "${PROJECT}" ] && error "Can't guess project name"
    build_repo_name
    [ -z "${REPO}" ] && error "Can't guess repository name"
    cd "${BASE_DIR}/${PROJECT}" || error "Can't chdir to ${BASE_DIR}/${PROJECT}..."
}

usage()
{
    info "
$1 => Turn in your current project. You must be at the root project's directory (e.g.: ~/rendu/my_project/)
$1 --reset => Reset rights on the server.
$1 -h | --help => This usage.

Login: You may change the login used by setting LOGIN in your env (e.g.: LOGIN=login_x rendu)"
#$1 --hard-reset => Reset project by deleting everything from it.
}

#set -x

init
#getpass
sshkey

if [ $# -eq 0 ]
then
	 rendu
	 exit 0
fi

if [ $# -gt 1 ]
then
	usage
	exit 1
fi

case "$1" in
	"--reset" | "--soft-reset")
	soft_reset
	;;
#	"--hard-reset")
#	hard_reset
#	;;
	"--help" | "-h")
	usage "$0"
	;;
	*)
	usage "$0" && exit 1
	;;
esac

set +x
exit 0
